{
    "project": {
        "name": "Avatar Wizard",
        "version": "0.1.0"
    },
    "files": {
        "static\\js\\AvatarWizard.js": {
            "name": "static\\js\\AvatarWizard.js",
            "modules": {},
            "classes": {
                "AvatarWizard": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "AvatarWizard": {
            "name": "AvatarWizard",
            "shortname": "AvatarWizard",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "static\\js\\AvatarWizard.js",
            "line": 1,
            "description": "Manages the composition of a user avatar using predefined graphic parts. This\nclass requires jQuery.\n\nThe avatar parts and settings are read from a specified base path that\nimplements the Avaparts REST APIs:\nhttp://gamepix-server-cs.cloudapp.net/v1/doc",
            "is_constructor": 1,
            "params": [
                {
                    "name": "canvas",
                    "description": "Mixed Specifies the HTML5 canvas where the avatar has to be\ndrawn. It can be specified as a HTMLCanvasElement object, string CSS selector\nor jQuery object."
                },
                {
                    "name": "settings",
                    "description": "Object A dictionary object containing several settings.",
                    "props": [
                        {
                            "name": "basePath",
                            "description": "String The base URL that implements the\nAvaparts API where avatar parts and configurations are read from.",
                            "optional": true,
                            "optdefault": "\"\""
                        },
                        {
                            "name": "ready",
                            "description": "Function A user-defined callback function invoked after\nthe `AvatarWizard` object has read its configuration file and its ready to\nreceive method invocations."
                        },
                        {
                            "name": "progress",
                            "description": "Function A user-defined callback function invoked\nseveral times during the initial loading process.",
                            "optional": true,
                            "props": [
                                {
                                    "name": "progress",
                                    "description": "Number A percentage value indicating the\ncurrent loading progress in a `[0, 100)` range."
                                }
                            ]
                        }
                    ]
                }
            ]
        }
    },
    "classitems": [
        {
            "file": "static\\js\\AvatarWizard.js",
            "line": 222,
            "description": "Recalculates the coordinate reference. This method must be invoked\nevery time the dimensions of the canvas change.\n\nThis method may be called in response to `resize` events at a high\nrate because the redraw rate is throttled down through\n`requestAnimationFrame`.",
            "itemtype": "method",
            "name": "resetDimensions",
            "chainable": 1,
            "class": "AvatarWizard"
        },
        {
            "file": "static\\js\\AvatarWizard.js",
            "line": 238,
            "description": "Loads the avatar described by the specified JSON object and updates\nthe rendering on the canvas.\n\nThe specified object must have the following format:\n\n\t{\n\t\t\"category1\": \"type4\",\n\t\t\"category2\": {\n\t\t\t\"type\": \"type3\",\n\t\t\t\"color\": \"#abcdef\"\n\t\t},\n\t\t\"category3\": {\n\t\t\t\"type\": \"type2\",\n\t\t\t\"color\": \"rgb(12, 34, 56)\"\n\t\t},\n\t\t\"category4\": {\n\t\t\t\"type\": \"type1\"\n\t\t},\n\t\t.\n\t\t.\n\t\t.\n\t}\n\nEach key must be a valid category name returned by the\n[Avaparts API](http://gamepix-server-cs.cloudapp.net/v1/doc) and its\nvalue can be either a string (a valid part/type name for that\ncategory) or an object; in the latter case it contains a mandatory\n`type` field specifying the part/type name and an optional `color`\nfield specifying a CSS color for the part.\n\nNote that the specified JSON object is deep-copied, so subsequent\nmodifications to it do not have any effect on the avatar managed by\nthis object. To modify the managed avatar use the\n{{#crossLink \"AvatarWizard/select\"}}select{{/crossLink}} and\n{{#crossLink \"AvatarWizard/setColor\"}}setColor{{/crossLink}} methods.",
            "itemtype": "method",
            "name": "loadAvatar",
            "chainable": 1,
            "params": [
                {
                    "name": "newDescriptor",
                    "description": "Object A JSON object describing the avatar to\nload."
                },
                {
                    "name": "callback",
                    "description": "Function An optional user-defined callback function\ninvoked after the new avatar has been loaded. The process is\nasynchronous because it may require loading parts that have not been\ncached yet.",
                    "optional": true
                }
            ],
            "class": "AvatarWizard"
        },
        {
            "file": "static\\js\\AvatarWizard.js",
            "line": 307,
            "description": "Returns a JSON object that describes the current avatar as modified\nby {{#crossLink \"AvatarWizard/loadAvatar\"}}loadAvatar{{/crossLink}}\nand {{#crossLink \"AvatarWizard/select\"}}select{{/crossLink}} calls.\n\nSee {{#crossLink \"AvatarWizard/loadAvatar\"}}loadAvatar{{/crossLink}}\nfor information about the JSON format of avatar descriptors.\n\nThe returned object is a deep copy of the object mainatined\ninternally by the AvatarWizard instance.",
            "itemtype": "method",
            "name": "getAvatar",
            "return": {
                "description": "Object A JSON object that describes the current avatar."
            },
            "class": "AvatarWizard"
        },
        {
            "file": "static\\js\\AvatarWizard.js",
            "line": 325,
            "description": "Returns the currently selected part type for the specified category,\nor `undefined` if no part is selected.\n\nParts can be selected per-category using the\n{{#crossLink \"AvatarWizard/select\"}}select{{/crossLink}} method.",
            "itemtype": "method",
            "name": "getSelected",
            "params": [
                {
                    "name": "category",
                    "description": "String A category name."
                }
            ],
            "return": {
                "description": "String The selected part type, or `undefined` if no part is\nselected for the specified category."
            },
            "class": "AvatarWizard"
        },
        {
            "file": "static\\js\\AvatarWizard.js",
            "line": 343,
            "description": "Selects the specified part for the specified category and updates the\nrendering of the avatar on the canvas.\n\nTo remove a currently selected part, invoke `select` for its category\nwithout specifying the `type` argument.",
            "itemtype": "method",
            "name": "select",
            "chainable": 1,
            "params": [
                {
                    "name": "categoryName",
                    "description": "String The category the part is being selected\nfor."
                },
                {
                    "name": "type",
                    "description": "String The part name. If not specified, the part is\nremoved.",
                    "optional": true
                },
                {
                    "name": "callback",
                    "description": "Function An optional user-defined callback function\ninvoked after the new part has been selected. The process is\nasynchronous because it may require loading parts that have not been\ncached yet.",
                    "optional": true
                }
            ],
            "example": [
                "\n\twizard.select('hair', 'blonde1');"
            ],
            "class": "AvatarWizard"
        },
        {
            "file": "static\\js\\AvatarWizard.js",
            "line": 393,
            "description": "Returns the current color for the specified category.\n\nThis value can be set per-category with the\n{{#crossLink \"AvatarWizard/setColor\"}}setColor{{/crossLink}} method\nor in the avatar descriptor specified to the\n{{#crossLink \"AvatarWizard/loadAvatar\"}}loadAvatar{{/crossLink}}\nmethod.\n\nThe return value is undefined if no color has been set.",
            "itemtype": "method",
            "name": "getColor",
            "params": [
                {
                    "name": "category",
                    "description": "String The category to set the color for."
                }
            ],
            "return": {
                "description": "String The current CSS color for the specified category, or\n`undefined` if no color is set."
            },
            "class": "AvatarWizard"
        },
        {
            "file": "static\\js\\AvatarWizard.js",
            "line": 415,
            "description": "Sets the color of the currently selected part for the specified\ncategory.",
            "itemtype": "method",
            "name": "setColor",
            "chainable": 1,
            "params": [
                {
                    "name": "category",
                    "description": "String A category name."
                },
                {
                    "name": "color",
                    "description": "String A CSS color value."
                }
            ],
            "class": "AvatarWizard"
        },
        {
            "file": "static\\js\\AvatarWizard.js",
            "line": 451,
            "description": "Returns an HTMLElement of the specified width and height containing a\nprerendered thumbnail of the avatar.\n\nThe exact type of HTML element is left unspecified: it may be an\nimage element as well as a canvas.",
            "itemtype": "method",
            "name": "getThumbnail",
            "params": [
                {
                    "name": "width",
                    "description": "Number The width of the thumbnail to generate."
                },
                {
                    "name": "height",
                    "description": "Number The height of the thumbnail to generate."
                },
                {
                    "name": "settings",
                    "description": "Object Thumbnail generation settings.",
                    "props": [
                        {
                            "name": "stretch",
                            "description": "Boolean Indicates whether the avatar\nmust be stretched to fit the specified width and height exactly.\n`false` indicates that the avatar's proportions are maintained.",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "configName",
                            "description": "String The thumbnail configuration to use.\nIt must be the name of a valid thumbnail configuration as per the\nreferred [Avaparts](http://gamepix-server-cs.cloudapp.net/v1/doc)\nserver (see the\n}constructor{{/crossLink}}\ndocumentation).",
                            "type": "#crossLink \"AvatarWizard\""
                        }
                    ]
                }
            ],
            "return": {
                "description": "HTMLElement An HTML element of the specified dimensions\ncontaining a prerendered avatar."
            },
            "class": "AvatarWizard"
        },
        {
            "file": "static\\js\\AvatarWizard.js",
            "line": 476,
            "description": "Returns a data URI that encodes a PNG prerendered image of the\navatar of the specified width and height.",
            "itemtype": "method",
            "name": "getEncodedThumbnail",
            "params": [
                {
                    "name": "width",
                    "description": "Number The width of the image to generate."
                },
                {
                    "name": "height",
                    "description": "Number The height of the image to generate."
                },
                {
                    "name": "settings",
                    "description": "Object Thumbnail generation settings.",
                    "props": [
                        {
                            "name": "stretch",
                            "description": "Boolean Indicates whether the avatar\nmust be stretched to fit the specified width and height exactly.\n`false` indicates that the avatar's proportions are maintained.",
                            "optional": true,
                            "optdefault": "false"
                        },
                        {
                            "name": "configName",
                            "description": "String The thumbnail configuration to use.\nIt must be the name of a valid thumbnail configuration as per the\nreferred [Avaparts](http://gamepix-server-cs.cloudapp.net/v1/doc)\nserver (see the\n}constructor{{/crossLink}}\ndocumentation).",
                            "type": "#crossLink \"AvatarWizard\""
                        }
                    ]
                }
            ],
            "return": {
                "description": "String A data URI that encodes the generated image in PNG\nformat."
            },
            "class": "AvatarWizard"
        }
    ],
    "warnings": []
}